import authService from './auth.service.js';
import {
  validateRegister,
  validateLogin,
  validateChangePassword,
  validateForgotPassword,
} from './auth.validation.js';
import logger from '../../config/logger.js';

class AuthController {
  async register(req, res) {
    try {
      // Validar datos de entrada
      const { error } = validateRegister(req.body);
      if (error) {
        return res.status(400).json({
          error: 'Datos de registro inv치lidos',
          details: error.details.map((detail) => ({
            field: detail.path.join('.'),
            message: detail.message,
          })),
        });
      }

      // Verificar si el email ya existe
      const emailExists = await authService.emailExists(req.body.email);
      if (emailExists) {
        return res.status(409).json({
          error: 'Este email ya est치 registrado',
          field: 'email',
        });
      }

      // Registrar usuario
      const result = await authService.register(req.body);

      logger.info('Usuario registrado exitosamente', {
        userId: result.user?.id,
        email: result.user?.email,
        rol: result.profile?.rol,
        ip: req.ip,
      });

      res.status(201).json({
        success: true,
        message: 'Usuario registrado exitosamente',
        user: result.user,
        session: result.session,
        profile: result.profile,
        requiresVerification: !result.user?.email_confirmed_at,
      });
    } catch (error) {
      logger.error('Error en registro', {
        error: error.message,
        email: req.body?.email,
        ip: req.ip,
        stack: error.stack,
      });

      // Manejar errores espec칤ficos
      let statusCode = 500;
      let errorMessage = 'Error interno del servidor';
      let field = null;

      if (
        error.message.includes('already registered') ||
        error.message.includes('ya est치 registrado')
      ) {
        statusCode = 409;
        errorMessage = 'Este email ya est치 registrado';
        field = 'email';
      } else if (error.message.includes('email')) {
        statusCode = 400;
        errorMessage = 'Error con el email proporcionado';
        field = 'email';
      } else if (
        error.message.includes('password') ||
        error.message.includes('contrase침a')
      ) {
        statusCode = 400;
        errorMessage = 'Error con la contrase침a';
        field = 'password';
      } else if (
        error.message.includes('full_name') ||
        error.message.includes('nombre')
      ) {
        statusCode = 400;
        errorMessage = 'Error con el nombre';
        field = 'full_name';
      } else if (
        error.message.includes('phone') ||
        error.message.includes('tel칠fono')
      ) {
        statusCode = 400;
        errorMessage = 'Error con el tel칠fono';
        field = 'phone';
      } else if (error.message.includes('rol')) {
        statusCode = 400;
        errorMessage = 'Rol inv치lido';
        field = 'rol';
      }

      const response = {
        error: errorMessage,
        details: error.message,
      };

      if (field) {
        response.field = field;
      }

      res.status(statusCode).json(response);
    }
  }

  async login(req, res) {
    try {
      // Validar datos de entrada
      const { error } = validateLogin(req.body);
      if (error) {
        return res.status(400).json({
          error: 'Datos de login inv치lidos',
          details: error.details.map((detail) => ({
            field: detail.path.join('.'),
            message: detail.message,
          })),
        });
      }

      // Intentar login
      const result = await authService.login(req.body);

      logger.info('Usuario logueado exitosamente', {
        userId: result.user?.id,
        email: result.user?.email,
        rol: result.profile?.rol,
        ip: req.ip,
      });

      res.json({
        success: true,
        message: 'Inicio de sesi칩n exitoso',
        user: result.user,
        session: result.session,
        profile: result.profile,
      });
    } catch (error) {
      logger.warn('Error en login', {
        error: error.message,
        email: req.body?.email,
        ip: req.ip,
      });

      const statusCode = 401;
      let errorMessage = 'Credenciales inv치lidas';

      if (
        error.message.includes('no encontrado') ||
        error.message.includes('not found')
      ) {
        errorMessage = 'Usuario no encontrado';
      } else if (
        error.message.includes('inactivo') ||
        error.message.includes('inactive')
      ) {
        errorMessage = 'Cuenta desactivada';
      } else if (
        error.message.includes('verificar') ||
        error.message.includes('verify')
      ) {
        errorMessage = 'Por favor verifica tu email antes de iniciar sesi칩n';
      }

      res.status(statusCode).json({
        error: errorMessage,
        details: error.message,
      });
    }
  }

  async logout(req, res) {
    try {
      await authService.logout(req.user.id);

      logger.info('Usuario deslogueado', {
        userId: req.user.id,
        ip: req.ip,
      });

      res.json({
        success: true,
        message: 'Sesi칩n cerrada exitosamente',
      });
    } catch (error) {
      logger.error('Error en logout', {
        error: error.message,
        userId: req.user?.id,
        ip: req.ip,
      });

      res.status(500).json({
        error: 'Error cerrando sesi칩n',
        details: error.message,
      });
    }
  }

  async getCurrentUser(req, res) {
    try {
      const user = await authService.getCurrentUser(req.user.id);
      res.json({
        success: true,
        user: user,
      });
    } catch (error) {
      logger.error('Error obteniendo usuario actual', {
        error: error.message,
        userId: req.user?.id,
      });

      res.status(500).json({
        error: 'Error obteniendo informaci칩n del usuario',
        details: error.message,
      });
    }
  }

  async changePassword(req, res) {
    try {
      const { error } = validateChangePassword(req.body);
      if (error) {
        return res.status(400).json({
          error: 'Datos inv치lidos',
          details: error.details.map((detail) => ({
            field: detail.path.join('.'),
            message: detail.message,
          })),
        });
      }

      await authService.changePassword(req.user.id, req.body);

      logger.info('Contrase침a cambiada exitosamente', {
        userId: req.user.id,
        ip: req.ip,
      });

      res.json({
        success: true,
        message: 'Contrase침a actualizada exitosamente',
      });
    } catch (error) {
      logger.error('Error cambiando contrase침a', {
        error: error.message,
        userId: req.user?.id,
        ip: req.ip,
      });

      let statusCode = 500;
      if (
        error.message.includes('actual incorrecta') ||
        error.message.includes('current password')
      ) {
        statusCode = 401;
      }

      res.status(statusCode).json({
        error: error.message || 'Error cambiando contrase침a',
        details: error.message,
      });
    }
  }

  async forgotPassword(req, res) {
    try {
      const { error } = validateForgotPassword(req.body);
      if (error) {
        return res.status(400).json({
          error: 'Email inv치lido',
          details: error.details.map((detail) => ({
            field: detail.path.join('.'),
            message: detail.message,
          })),
        });
      }

      await authService.forgotPassword(req.body.email);

      logger.info('Recuperaci칩n de contrase침a solicitada', {
        email: req.body.email,
        ip: req.ip,
      });

      res.json({
        success: true,
        message: 'Se ha enviado un enlace de recuperaci칩n a tu email',
      });
    } catch (error) {
      logger.error('Error en recuperaci칩n de contrase침a', {
        error: error.message,
        email: req.body?.email,
        ip: req.ip,
      });

      res.status(500).json({
        error: 'Error enviando email de recuperaci칩n',
        details: error.message,
      });
    }
  }

  async resetPassword(req, res) {
    try {
      await authService.resetPassword(req.body);

      logger.info('Contrase침a restablecida exitosamente', {
        ip: req.ip,
      });

      res.json({
        success: true,
        message: 'Contrase침a restablecida exitosamente',
      });
    } catch (error) {
      logger.error('Error restableciendo contrase침a', {
        error: error.message,
        ip: req.ip,
      });

      res.status(400).json({
        error: error.message || 'Error restableciendo contrase침a',
        details: error.message,
      });
    }
  }

  async refreshToken(req, res) {
    try {
      const result = await authService.refreshToken(req.user.id);
      res.json({
        success: true,
        ...result,
      });
    } catch (error) {
      logger.error('Error renovando token', {
        error: error.message,
        userId: req.user?.id,
      });

      res.status(401).json({
        error: 'Error renovando token',
        details: error.message,
      });
    }
  }

  async verifyEmail(req, res) {
    try {
      console.log('游꿢 Controller verifyEmail - req.body:', req.body);

      // Validar datos de entrada
      const { email, code } = req.body;

      console.log('游닎 Email extra칤do:', email);
      console.log('游댐 Code extra칤do:', code);

      if (!email || !code) {
        return res.status(400).json({
          error: 'Email y c칩digo son requeridos',
          details: 'Faltan campos obligatorios',
        });
      }

      if (code.length !== 6) {
        return res.status(400).json({
          error: 'C칩digo de verificaci칩n inv치lido',
          details: 'El c칩digo debe tener 6 d칤gitos',
        });
      }

      // Verificar email
      console.log('游닋 Enviando al servicio:', { email, code });
      const result = await authService.verifyEmail({ email, code });
      console.log('游닌 Resultado del servicio:', result);

      logger.info('Email verificado exitosamente', {
        userId: result.user?.id,
        email: result.user?.email,
        ip: req.ip,
      });

      res.json({
        success: true,
        message: result.message,
        user: result.user,
        session: result.session,
        profile: result.profile,
      });
    } catch (error) {
      logger.warn('Error en verificaci칩n de email', {
        error: error.message,
        email: req.body?.email,
        ip: req.ip,
      });

      let statusCode = 400;
      let errorMessage = 'Error en verificaci칩n de email';

      if (
        error.message.includes('inv치lido') ||
        error.message.includes('expirado')
      ) {
        errorMessage = 'C칩digo de verificaci칩n inv치lido o expirado';
      } else if (error.message.includes('no encontrado')) {
        errorMessage = 'Usuario no encontrado';
        statusCode = 404;
      }

      res.status(statusCode).json({
        error: errorMessage,
        details: error.message,
      });
    }
  }

  async resendVerification(req, res) {
    try {
      await authService.resendVerification(req.body.email);

      logger.info('Email de verificaci칩n reenviado', {
        email: req.body.email,
        ip: req.ip,
      });

      res.json({
        success: true,
        message: 'Email de verificaci칩n reenviado',
      });
    } catch (error) {
      logger.error('Error reenviando verificaci칩n', {
        error: error.message,
        email: req.body?.email,
        ip: req.ip,
      });

      res.status(500).json({
        error: 'Error reenviando email de verificaci칩n',
        details: error.message,
      });
    }
  }

  async resendVerificationCode(req, res) {
    try {
      console.log('游꿢 Controller resendVerificationCode - req.body:', req.body);

      // Validar datos de entrada
      const { email } = req.body;

      console.log('游닎 Email extra칤do para reenv칤o:', email);

      if (!email) {
        return res.status(400).json({
          error: 'Email es requerido',
          details: 'Campo email faltante',
        });
      }

      // Reenviar c칩digo
      console.log('游닋 Reenviando c칩digo para email:', email);
      const result = await authService.resendVerificationCode(email);
      console.log('游닌 Resultado del reenv칤o:', result);

      logger.info('C칩digo de verificaci칩n reenviado', {
        email: email,
        ip: req.ip,
      });

      res.json({
        success: true,
        message: result.message,
        expires_in_minutes: result.expires_in_minutes,
      });
    } catch (error) {
      logger.warn('Error reenviando c칩digo de verificaci칩n', {
        error: error.message,
        email: req.body?.email,
        ip: req.ip,
      });

      let statusCode = 400;
      let errorMessage = 'Error enviando c칩digo de verificaci칩n';

      if (error.message.includes('no existe')) {
        errorMessage = 'No existe una cuenta con este email';
        statusCode = 404;
      } else if (error.message.includes('ya est치 verificada')) {
        errorMessage = 'Esta cuenta ya est치 verificada';
        statusCode = 409;
      } else if (error.message.includes('recientemente')) {
        errorMessage =
          'Ya se envi칩 un c칩digo recientemente. Espera antes de solicitar otro.';
        statusCode = 429;
      }

      res.status(statusCode).json({
        error: errorMessage,
        details: error.message,
      });
    }
  }
  async updateUserRole(req, res) {
    try {
      const { userId, newRole } = req.body;

      if (!req.user.is_admin && req.user.rol !== 'admin') {
        return res.status(403).json({
          error: 'No tienes permisos para cambiar roles de usuario',
        });
      }

      await authService.updateUserRole(userId, newRole, req.user.id);

      logger.info('Rol de usuario actualizado', {
        targetUserId: userId,
        newRole: newRole,
        adminUserId: req.user.id,
        ip: req.ip,
      });

      res.json({
        success: true,
        message: 'Rol de usuario actualizado exitosamente',
      });
    } catch (error) {
      logger.error('Error actualizando rol', {
        error: error.message,
        targetUserId: req.body?.userId,
        adminUserId: req.user?.id,
        ip: req.ip,
      });

      res.status(400).json({
        error: error.message || 'Error actualizando rol',
        details: error.message,
      });
    }
  }
}

export default new AuthController();
